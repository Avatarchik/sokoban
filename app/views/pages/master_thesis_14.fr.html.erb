<div id="limited-content">

<h1 class="chapter"><span class="chapter_label">Chapitre 12</span> <a id='magicparlabel-4017' />
Optimisations</h1>
<div class="standard"><a id='magicparlabel-4018' />
<hr />

</div>

<div class="standard"><a id='magicparlabel-4019' />
</div>

<div class="standard"><a id='magicparlabel-4024' />
Ce chapitre présente des fonctionnalités qui ont été intégrées dans notre solveur avec pour objectif de trouver des résultats plus vite et dans un arbre de recherche plus petit. Celles-ci sont basées sur deux méthodes. La première permet de prendre des <em>raccourcis</em> dans l'arbre de recherche en autorisant d'autres types de transitions plus efficaces. La deuxième permet de supprimer une certaine quantité de nœuds inutiles de l'arbre de recherche.</div>
<h2 class="section"><span class="section_label">12.1</span> <a id='magicparlabel-4025' />
<a id="sec_Macro_pouss__es" />
Macro-poussées</h2>
<div class="standard" style='text-align: center;'><a id='magicparlabel-4026' />
<strong><div class='Boxed' style='width: 75%; '><div class="plain_layout"><a id='magicparlabel-4030' />
<strong>macro-poussée</strong> : transition entre deux nœuds de l'arbre de recherche qui permet de pousser directement une caisse sur un goal même s'il faut plusieurs poussées pour y arriver.</div>
</div></strong></div>

<div class="standard"><a id='magicparlabel-4031' />
Les <em>macro-poussées</em> introduisent une nouvelle couche d'abstraction au niveau des transitions possibles dans l'arbre de recherche. Notre première couche d'abstraction était d'utiliser les <em>poussées des caisses</em> au lieu des <em>mouvements du pousseur</em>. Ceci nous avait permis de réduire considérablement l'arbre de recherche en transformant la position du pousseur en une zone du pousseur.
<br />

</div>

<div class="standard"><a id='magicparlabel-4032' />
La nouvelle couche d'abstraction que représentent les macro-poussées se montre très pratique pour prendre des raccourcis dans l'arbre de recherche. Si une caisse peut être poussée sur un goal sans qu'il ne soit nécessaire de bouger d'autres caisses, alors un nouvel état sera créé dans l'arbre avec la caisse située sur le goal et le pousseur juste à côté. Les macro-poussées interviennent en plus des poussées régulières comme illustré sur la Figure <a href="#sec_Macro_pouss__es">12.1</a>.
<br />

</div>
<div class='float float-figure'><div class="plain_layout" style='text-align: center;'><a id='magicparlabel-4036' />
<img style='width:75%;' src='assets/master_thesis/81_Users_michael_Desktop_memoire_images_macro_macropoussee.png' alt='image: 81_Users_michael_Desktop_memoire_images_macro_macropoussee.png' />
</div>

<div class="plain_layout"><a id='magicparlabel-4037' />
<div class='float-caption float-caption-figure'>Figure 12.1:<div class="plain_layout"><a id='magicparlabel-4041' />
<a id="fig_macropoussee" />
Estimation de l'état en cours ainsi que trois sous-états pénalisés qui y sont inclus.</div>
</div></div>
</div>


<div class="standard"><a id='magicparlabel-4042' />
Pour trouver les macro-poussées qui sont réalisables à partir d'un état de l'arbre de recherche, nous appliquons l'algorithme de Dijkstra sur le graphe connexe amélioré décrit dans la Section <a href="#sub_Distance_r__elle_avec">7.1.3</a>. Le but est de connaître quelles positions du niveau qui contiennent un goal peuvent être atteintes par la caisse.
<br />

</div>

<div class="standard"><a id='magicparlabel-4043' />
Dans la Section <a href="#sub_Distance_r__elle_avec">7.1.3</a>, le graphe connexe calculait la distance d'une caisse vers chacun des goals sans prendre en compte les autres caisses. Cette fois-ci, toutes les autres caisses devront être considérées comme des obstacles. Le graphe connexe amélioré sera donc créé à partir de l'état courant en considérant toutes les autres caisses comme si elles étaient des murs.
<br />

</div>

<div class="standard"><a id='magicparlabel-4044' />
Contrairement à ce que l'on pourrait croire, on n'ajoute pas toutes les macro-poussées détectées dans un état. On ajoute uniquement celles qui ont l'air les plus prometteuses. Inspirée de l'ordonnancement des goals deDemaret (<a href='#LyXCite-DEM07'>2007</a>), cette méthode n'autorise que les macro-poussées des caisses vers les goals qui sont cernés, sur les 4 positions directement voisines, par le plus de caisses et de murs.
<br />

</div>

<div class="standard"><a id='magicparlabel-4045' />
Par exemple, admettons que <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <msub>
   <mrow><mi>g</mi>
   </mrow>
   <mrow><mn>1</mn>
   </mrow>
  </msub>
 </mrow></math> soit un goal dont le voisin du haut est un mur, celui de droite une caisse et les deux autres des positions vides et que <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <msub>
   <mrow><mi>g</mi>
   </mrow>
   <mrow><mn>2</mn>
   </mrow>
  </msub>
 </mrow></math> soit un goal dont trois des quatre voisins sont des positions vides. On assignera un coût 2 à <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <msub>
   <mrow><mi>g</mi>
   </mrow>
   <mrow><mn>1</mn>
   </mrow>
  </msub>
 </mrow></math> et un coût 1 à <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <msub>
   <mrow><mi>g</mi>
   </mrow>
   <mrow><mn>2</mn>
   </mrow>
  </msub>
 </mrow></math>. Les macro-poussées autorisées seront uniquement celles qui aboutiront sur <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <msub>
   <mrow><mi>g</mi>
   </mrow>
   <mrow><mn>1</mn>
   </mrow>
  </msub>
 </mrow></math>. Cette technique permet de commencer par remplir les goals des coins et évite ainsi de bloquer des goals derrière des amas de caisses infranchissables.
<br />

</div>

<div class="standard"><a id='magicparlabel-4046' />
En utilisant la méthode des macro-poussées, l'affirmation qui disait que <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mi>g</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo><mi>n</mi><mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
  </mrow>
 </mrow></math> représentait la profondeur d'un nœud dans l'arbre de recherche n'est plus vérifiée. En effet, la valeur <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mi>g</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo><mi>n</mi><mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
  </mrow>
 </mrow></math> d'un état obtenu après macro-poussée correspondra à la somme de la valeur <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mi>g</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo><mi>n</mi><mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
  </mrow>
 </mrow></math> de son père et du nombre de poussées relatif à la macro-poussée.
<br />

</div>

<div class="standard"><a id='magicparlabel-4047' />
Une autre difficulté relative à l'introduction des macro-poussées concerne la remontée dans l'arbre de recherche à partir du nœud solution. Cette remontée permet de trouver le chemin emprunté par le pousseur entre le nœud initial et le nœud solution. Trouver les mouvements successifs du pousseur alors que deux couches d'abstractions sont utilisées n'est pas évident. De nombreuses techniques impliquant l'algorithme de Dijkstra au niveau du pousseur et au niveau des caisses seront utilisées.</div>
<h2 class="section"><span class="section_label">12.2</span> <a id='magicparlabel-4048' />
Élagage</h2>
<div class="standard"><a id='magicparlabel-4049' />
Nous partons de la constatation suivante : un nœud de l'arbre de recherche qui n'est pas solution et dont tous les fils sont rejetés pour cause de deadlock, coût excessif ou duplication est inutile. Ce nœud correspond à une <em>feuille</em> de l'arbre dont on peut affirmer qu'elle ne donnera pas naissance à un sous-arbre car aucun de ses fils n'est en liste d'attente.
<br />

</div>

<div class="standard"><a id='magicparlabel-4050' />
La suppression d'un de ces nœuds<em> </em>inutiles s'effectue lors de son traitement. Nous comptons ses fils réellement placés dans l'arbre de recherche. Si aucun fils n'est gardé à la fin de son traitement, nous décidons de supprimer le nœud de l'arbre.
<br />

</div>

<div class="standard"><a id='magicparlabel-4051' />
Sur base de nombreuses exécutions de notre solveur, nous avons remarqué que cette méthode nous permettait d'économiser en moyenne 30% de la structure de l'arbre de recherche. Ce résultat a pu être obtenu en comparant le nombre de nœuds traités et le nombre de nœuds réellement stockés dans l'arbre de recherche. Ce pourcentage ne nous parait pas incroyable. De fait, nous avons vu que, dans un arbre binaire complet, les feuilles représentent environ la moitié de la structure de l'arbre. Notre arbre de recherche n'est pas binaire et encore moins équilibré mais un gain non négligeable est quand même présent.
<br />

</div>

<div class="standard"><a id='magicparlabel-4052' />
Nous avons voulu pousser l'idée jusqu'à supprimer des sous-arbres complets de l'arbre de recherche qui ne pourraient plus s'étendre. L'objectif était de remonter dans l'arbre de recherche lorsqu'une feuille était trouvée et de supprimer le plus haut nœud pour lequel tous les descendants étaient inutiles. L'idée fonctionnait très bien sur certains niveaux mais, étant donné qu'un nœud peut parfois être obtenu via plusieurs chemins différents, il arrivait que la méthode boucle en repassant de très nombreuses fois sur des chemins qui étaient chaque fois supprimés.
<br />

</div>

<div class="standard"><a id='magicparlabel-4053' />
Cette technique n'est efficace qu'avec une bonne organisation des nœuds en attente. En effet, si nous parcourons en priorité les nœuds pour lesquels <math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mrow><mi>g</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo><mi>n</mi><mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
  </mrow>
 </mrow></math> est petit, nous obtenons un parcours proche du parcours en largeur. Le résultat est que les feuilles mortes apparaîtront souvent très tardivement dans la recherche ce qui en réduit l'intérêt. Plus le parcours de l'arbre de recherche ressemble à un parcours en profondeur, plus la méthode est efficace. Les tris de liste d'attente conseillés dans les parcours A* et IDA* (<em>cf. </em>Sections <a href="#sub_triA">6.4.3</a> et <a href="#sub_triIDA">6.5.5</a>) sont adaptés à un bon fonctionnement de l'élagage de l'arbre de recherche.</div>

</div>
